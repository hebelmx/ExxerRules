<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExxerRules.Tests</name>
    </assembly>
    <members>
        <member name="T:ExxerRules.Tests.ManualTestRunner">
            <summary>
            Manual test runner to verify analyzer functionality without XUnit framework issues.
            This follows TDD principles by creating tests we can make pass.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_NotReportDiagnostic_When_TestMethodFollowsNamingConvention">
            <summary>
            Tests that valid test naming convention does not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_ReportDiagnostic_When_TestMethodDoesNotFollowNamingConvention">
            <summary>
            Tests that invalid test naming convention reports diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.RunAnalyzer(System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Runs a diagnostic analyzer on the given source code.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_ReportDiagnostic_When_MethodLacksNullParameterValidation">
            <summary>
            Tests that null parameter validation is reported when missing.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_NotReportDiagnostic_When_MethodHasNullParameterValidation">
            <summary>
            Tests that proper null parameter validation does not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_NotReportDiagnostic_When_MethodHasNoReferenceParameters">
            <summary>
            Tests that methods with no reference parameters don't report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_ReportDiagnostic_When_AsyncMethodLacksCancellationToken">
            <summary>
            Tests that async methods without CancellationToken report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_NotReportDiagnostic_When_AsyncMethodHasCancellationToken">
            <summary>
            Tests that async methods with CancellationToken do not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_NotReportDiagnostic_When_MethodIsNotAsyncNamed">
            <summary>
            Tests that non-async methods do not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_NotReportDiagnostic_When_AsyncVoidEventHandler">
            <summary>
            Tests that async void methods (event handlers) do not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_ReportDiagnostic_When_PublicMemberLacksXmlDocumentation">
            <summary>
            Tests that public members without XML documentation report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_NotReportDiagnostic_When_PublicMemberHasXmlDocumentation">
            <summary>
            Tests that public members with XML documentation do not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_NotReportDiagnostic_When_MemberIsNotPublic">
            <summary>
            Tests that non-public members do not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_ReportDiagnostic_When_PublicPropertyLacksXmlDocumentation">
            <summary>
            Tests that public properties without XML documentation report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.DebugXmlDocumentationAnalyzer">
            <summary>
            Debug helper to understand XML documentation detection issues.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.RunAllTests">
            <summary>
            Runs all manual tests and reports results.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_ReportDiagnostic_When_MagicNumbersAreUsed">
            <summary>
            Tests that magic numbers report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_ReportDiagnostic_When_MagicStringsAreUsed">
            <summary>
            Tests that magic strings report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_NotReportDiagnostic_When_NamedConstantsAreUsed">
            <summary>
            Tests that named constants do not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_NotReportDiagnostic_When_CommonNumbersAreUsed">
            <summary>
            Tests that common numbers (0, 1, -1, etc.) do not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_ReportDiagnostic_When_RegionsAreUsed">
            <summary>
            Tests that regions report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_NotReportDiagnostic_When_NoRegionsAreUsed">
            <summary>
            Tests that code without regions does not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_ReportDiagnostic_When_StringConcatenationIsUsedInLogging">
            <summary>
            Tests that string concatenation in logging reports diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_NotReportDiagnostic_When_StructuredLoggingIsUsed">
            <summary>
            Tests that structured logging does not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_ReportDiagnostic_When_ConsoleWriteLineIsUsed">
            <summary>
            Tests that Console.WriteLine usage reports diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.ManualTestRunner.Should_NotReportDiagnostic_When_ProperLoggingIsUsedInsteadOfConsole">
            <summary>
            Tests that proper logging does not report diagnostic.
            </summary>
        </member>
        <member name="T:ExxerRules.Tests.Program">
            <summary>
            Simple console program to run manual tests following TDD principles.
            Now uses SRP-based architecture for better maintainability.
            </summary>
        </member>
        <member name="T:ExxerRules.Tests.RefactoredManualTestRunner">
            <summary>
            Refactored manual test runner using SRP (Single Responsibility Principle).
            Each class now has a single, well-defined responsibility.
            SRP: This class is responsible only for orchestrating the test execution workflow.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.RefactoredManualTestRunner.RunAllTests">
            <summary>
            Runs all tests using the refactored SRP-based architecture.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.RefactoredManualTestRunner.CreateTestSuite">
            <summary>
            Creates and configures the complete test suite.
            SRP: Responsible only for test suite composition and configuration.
            </summary>
            <returns>A configured test suite with all test cases.</returns>
        </member>
        <member name="M:ExxerRules.Tests.RefactoredManualTestRunner.RunTestsByCategory(System.String)">
            <summary>
            Demonstrates the flexibility of the SRP architecture by running tests by category.
            </summary>
            <param name="category">The category to run.</param>
        </member>
        <member name="T:ExxerRules.Tests.TestCases.CodeFormattingTests">
            <summary>
            Test cases for code formatting analyzers.
            SRP: Contains only test cases related to code formatting validation.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.TestCases.CodeFormattingTests.Should_ReportHiddenDiagnostic_When_ProjectFormattingAnalyzer">
            <summary>
            Tests that project formatting analyzer provides hidden diagnostic for triggering format action.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.TestCases.CodeFormattingTests.Should_ReportDiagnostic_When_FormattingIssuesDetected">
            <summary>
            Tests that code formatting analyzer detects formatting issues.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.TestCases.CodeFormattingTests.Should_NotReportDiagnostic_When_CodeIsWellFormatted">
            <summary>
            Tests that well-formatted code does not report formatting issues.
            </summary>
        </member>
        <member name="T:ExxerRules.Tests.TestCases.FunctionalPatternsTests">
            <summary>
            Test cases for functional patterns analyzers.
            SRP: Contains only test cases related to functional programming patterns.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.TestCases.FunctionalPatternsTests.Should_ReportDiagnostic_When_ThrowStatementIsUsed">
            <summary>
            Tests that throw statements report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.TestCases.FunctionalPatternsTests.Should_NotReportDiagnostic_When_ReturningResult">
            <summary>
            Tests that returning Result&lt;T&gt; does not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.TestCases.FunctionalPatternsTests.Should_ReportDiagnostic_When_ThrowingInsteadOfReturningResult">
            <summary>
            Tests that throwing instead of returning Result&lt;T&gt; reports diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.TestCases.FunctionalPatternsTests.Should_NotReportDiagnostic_When_UsingResultPattern">
            <summary>
            Tests that using Result pattern does not report diagnostic.
            </summary>
        </member>
        <member name="T:ExxerRules.Tests.TestCases.TestingStandardsTests">
            <summary>
            Test cases for testing standards analyzers.
            SRP: Contains only test cases related to testing standards validation.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.TestCases.TestingStandardsTests.Should_NotReportDiagnostic_When_TestMethodFollowsNamingConvention">
            <summary>
            Tests that valid test naming convention does not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.TestCases.TestingStandardsTests.Should_ReportDiagnostic_When_TestMethodDoesNotFollowNamingConvention">
            <summary>
            Tests that invalid test naming convention reports diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.TestCases.TestingStandardsTests.Should_ReportDiagnostic_When_UsingMoq">
            <summary>
            Tests that using Moq reports diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.TestCases.TestingStandardsTests.Should_NotReportDiagnostic_When_UsingNSubstitute">
            <summary>
            Tests that using NSubstitute does not report diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.TestCases.TestingStandardsTests.Should_ReportDiagnostic_When_UsingFluentAssertions">
            <summary>
            Tests that using FluentAssertions reports diagnostic.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.TestCases.TestingStandardsTests.Should_NotReportDiagnostic_When_UsingShouldly">
            <summary>
            Tests that using Shouldly does not report diagnostic.
            </summary>
        </member>
        <member name="T:ExxerRules.Tests.Testing.AnalyzerTestHelper">
            <summary>
            Provides helper methods for testing diagnostic analyzers.
            SRP: Encapsulates analyzer execution logic and compilation details.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.Testing.AnalyzerTestHelper.RunAnalyzer(System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Runs a diagnostic analyzer on the given source code and returns the diagnostics.
            </summary>
            <param name="sourceCode">The source code to analyze.</param>
            <param name="analyzer">The analyzer to run.</param>
            <returns>The diagnostics reported by the analyzer.</returns>
        </member>
        <member name="M:ExxerRules.Tests.Testing.AnalyzerTestHelper.GetMetadataReferences">
            <summary>
            Gets the metadata references required for compilation.
            </summary>
            <returns>An array of metadata references.</returns>
        </member>
        <member name="T:ExxerRules.Tests.Testing.ITestCase">
            <summary>
            Defines a contract for a test case that can be executed.
            SRP: Represents a single test case with its execution logic.
            </summary>
        </member>
        <member name="P:ExxerRules.Tests.Testing.ITestCase.Name">
            <summary>
            Gets the name of the test case.
            </summary>
        </member>
        <member name="P:ExxerRules.Tests.Testing.ITestCase.Category">
            <summary>
            Gets the category of the test case for grouping purposes.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.Testing.ITestCase.Execute">
            <summary>
            Executes the test case and returns the result.
            </summary>
            <returns>The test execution result.</returns>
        </member>
        <member name="T:ExxerRules.Tests.Testing.TestCase">
            <summary>
            Represents a single test case with its execution logic.
            SRP: Encapsulates test execution with timing and error handling.
            </summary>
        </member>
        <member name="P:ExxerRules.Tests.Testing.TestCase.Name">
            <inheritdoc/>
        </member>
        <member name="P:ExxerRules.Tests.Testing.TestCase.Category">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestCase.#ctor(System.String,System.String,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:ExxerRules.Tests.Testing.TestCase"/> class.
            </summary>
            <param name="name">The test name.</param>
            <param name="category">The test category.</param>
            <param name="testMethod">The test method to execute.</param>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestCase.Execute">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Tests.Testing.TestReporter">
            <summary>
            Responsible for formatting and displaying test results.
            SRP: Handles all test result reporting and formatting concerns.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestReporter.ReportProgress(ExxerRules.Tests.Testing.TestResult)">
            <summary>
            Reports the progress of a single test as it completes.
            </summary>
            <param name="result">The test result to report.</param>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestReporter.ReportSummary(System.Collections.Generic.IReadOnlyList{ExxerRules.Tests.Testing.TestResult})">
            <summary>
            Reports a comprehensive summary of all test results.
            </summary>
            <param name="results">The test results to summarize.</param>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestReporter.ReportCategoryBreakdown(System.Collections.Generic.IReadOnlyList{ExxerRules.Tests.Testing.TestResult})">
            <summary>
            Reports test results grouped by category.
            </summary>
            <param name="results">The test results to group and report.</param>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestReporter.ReportFailedTests(System.Collections.Generic.IEnumerable{ExxerRules.Tests.Testing.TestResult})">
            <summary>
            Reports detailed information about failed tests.
            </summary>
            <param name="failedTests">The failed test results.</param>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestReporter.GetCategoryFromTestName(System.String)">
            <summary>
            Extracts category information from test name.
            </summary>
            <param name="testName">The test name.</param>
            <returns>The inferred category.</returns>
        </member>
        <member name="T:ExxerRules.Tests.Testing.TestResult">
            <summary>
            Represents the result of executing a test case.
            SRP: Encapsulates test execution outcome and details.
            </summary>
        </member>
        <member name="P:ExxerRules.Tests.Testing.TestResult.TestName">
            <summary>
            Gets the name of the test that was executed.
            </summary>
        </member>
        <member name="P:ExxerRules.Tests.Testing.TestResult.Passed">
            <summary>
            Gets a value indicating whether the test passed.
            </summary>
        </member>
        <member name="P:ExxerRules.Tests.Testing.TestResult.ErrorMessage">
            <summary>
            Gets the error message if the test failed.
            </summary>
        </member>
        <member name="P:ExxerRules.Tests.Testing.TestResult.Exception">
            <summary>
            Gets the exception that caused the test to fail, if any.
            </summary>
        </member>
        <member name="P:ExxerRules.Tests.Testing.TestResult.ExecutionTime">
            <summary>
            Gets the execution time of the test.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestResult.#ctor(System.String,System.Boolean,System.String,System.Exception,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ExxerRules.Tests.Testing.TestResult"/> class.
            </summary>
            <param name="testName">The name of the test.</param>
            <param name="passed">Whether the test passed.</param>
            <param name="errorMessage">The error message if failed.</param>
            <param name="exception">The exception if failed.</param>
            <param name="executionTime">The test execution time.</param>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestResult.Success(System.String,System.TimeSpan)">
            <summary>
            Creates a successful test result.
            </summary>
            <param name="testName">The name of the test.</param>
            <param name="executionTime">The execution time.</param>
            <returns>A successful test result.</returns>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestResult.Failure(System.String,System.String,System.TimeSpan)">
            <summary>
            Creates a failed test result.
            </summary>
            <param name="testName">The name of the test.</param>
            <param name="errorMessage">The error message.</param>
            <param name="executionTime">The execution time.</param>
            <returns>A failed test result.</returns>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestResult.FromException(System.String,System.Exception,System.TimeSpan)">
            <summary>
            Creates a failed test result with an exception.
            </summary>
            <param name="testName">The name of the test.</param>
            <param name="exception">The exception that caused the failure.</param>
            <param name="executionTime">The execution time.</param>
            <returns>A failed test result.</returns>
        </member>
        <member name="T:ExxerRules.Tests.Testing.TestRunner">
            <summary>
            Executes a collection of test cases and collects the results.
            SRP: Responsible only for test execution orchestration.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestRunner.RunTests(System.Collections.Generic.IEnumerable{ExxerRules.Tests.Testing.ITestCase})">
            <summary>
            Runs all provided test cases and returns the results.
            </summary>
            <param name="testCases">The test cases to execute.</param>
            <returns>A collection of test results.</returns>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestRunner.RunTests(System.Collections.Generic.IEnumerable{ExxerRules.Tests.Testing.ITestCase},System.Action{ExxerRules.Tests.Testing.TestResult})">
            <summary>
            Runs all provided test cases and returns the results with progress reporting.
            </summary>
            <param name="testCases">The test cases to execute.</param>
            <param name="progressCallback">Optional callback for progress reporting.</param>
            <returns>A collection of test results.</returns>
        </member>
        <member name="T:ExxerRules.Tests.Testing.TestSuite">
            <summary>
            Manages a collection of test cases and provides organization capabilities.
            SRP: Responsible for test case collection management and suite organization.
            </summary>
        </member>
        <member name="P:ExxerRules.Tests.Testing.TestSuite.Name">
            <summary>
            Gets the name of the test suite.
            </summary>
        </member>
        <member name="P:ExxerRules.Tests.Testing.TestSuite.TestCount">
            <summary>
            Gets the total number of tests in the suite.
            </summary>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestSuite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExxerRules.Tests.Testing.TestSuite"/> class.
            </summary>
            <param name="name">The name of the test suite.</param>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestSuite.AddTest(ExxerRules.Tests.Testing.ITestCase)">
            <summary>
            Adds a test case to the suite.
            </summary>
            <param name="testCase">The test case to add.</param>
            <returns>This test suite for method chaining.</returns>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestSuite.AddTest(System.String,System.String,System.Func{System.Boolean})">
            <summary>
            Adds a test case to the suite using a simple method.
            </summary>
            <param name="name">The test name.</param>
            <param name="category">The test category.</param>
            <param name="testMethod">The test method.</param>
            <returns>This test suite for method chaining.</returns>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestSuite.GetTests">
            <summary>
            Gets all test cases in the suite.
            </summary>
            <returns>A read-only collection of test cases.</returns>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestSuite.GetTestsByCategory(System.String)">
            <summary>
            Gets test cases filtered by category.
            </summary>
            <param name="category">The category to filter by.</param>
            <returns>Test cases matching the category.</returns>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestSuite.GetCategories">
            <summary>
            Gets all unique categories in the test suite.
            </summary>
            <returns>A collection of category names.</returns>
        </member>
        <member name="M:ExxerRules.Tests.Testing.TestSuite.Execute(ExxerRules.Tests.Testing.TestRunner,ExxerRules.Tests.Testing.TestReporter)">
            <summary>
            Executes all tests in the suite.
            </summary>
            <param name="runner">The test runner to use.</param>
            <param name="reporter">Optional reporter for progress updates.</param>
            <returns>The test results.</returns>
        </member>
    </members>
</doc>
