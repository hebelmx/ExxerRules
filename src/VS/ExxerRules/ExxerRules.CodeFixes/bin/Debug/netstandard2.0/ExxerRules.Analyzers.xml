<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExxerRules.Analyzers</name>
    </assembly>
    <members>
        <member name="T:ExxerRules.Analyzers.Async.AsyncMethodsShouldAcceptCancellationTokenAnalyzer">
            <summary>
            Analyzer that enforces CancellationToken parameters in async methods.
            Supports graceful cancellation and fail-safe defaults principles.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.Async.AsyncMethodsShouldAcceptCancellationTokenAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.Async.AsyncMethodsShouldAcceptCancellationTokenAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Analyzers.CodeQuality.AvoidMagicNumbersAndStringsAnalyzer">
            <summary>
            Analyzer that enforces use of named constants instead of magic numbers and strings.
            Supports the "avoid globals and hardcoding" principle by promoting named constants.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.CodeQuality.AvoidMagicNumbersAndStringsAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.CodeQuality.AvoidMagicNumbersAndStringsAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Analyzers.CodeQuality.DoNotUseRegionsAnalyzer">
            <summary>
            Analyzer that enforces not using regions for code organization.
            Supports the "prefer subclasses over regions" principle.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.CodeQuality.DoNotUseRegionsAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.CodeQuality.DoNotUseRegionsAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Analyzers.Common.AnalysisExtensions">
            <summary>
            Extension methods for functional analysis operations using FluentResults.
            </summary>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisExtensions.Map``2(FluentResults.Result{``0},System.Func{``0,``1})">
            <summary>
            Maps a successful result to a new value using a transformation function.
            </summary>
            <typeparam name="TSource">The source result type.</typeparam>
            <typeparam name="TDestination">The destination result type.</typeparam>
            <param name="result">The source result.</param>
            <param name="mapper">The transformation function.</param>
            <returns>A new result with the transformed value, or the original error if the source failed.</returns>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisExtensions.Bind``2(FluentResults.Result{``0},System.Func{``0,FluentResults.Result{``1}})">
            <summary>
            Chains a result-returning function to the current result.
            </summary>
            <typeparam name="TSource">The source result type.</typeparam>
            <typeparam name="TDestination">The destination result type.</typeparam>
            <param name="result">The source result.</param>
            <param name="binder">The function that returns a new result.</param>
            <returns>The result of the binder function, or the original error if the source failed.</returns>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisExtensions.Tap``1(FluentResults.Result{``0},System.Action{``0})">
            <summary>
            Executes an action on the result value if successful, without changing the result.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="result">The source result.</param>
            <param name="action">The action to execute on the value.</param>
            <returns>The original result unchanged.</returns>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisExtensions.IfFailed``1(FluentResults.Result{``0},``0)">
            <summary>
            Provides a default value if the result is failed.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="result">The source result.</param>
            <param name="defaultValue">The default value to use if the result failed.</param>
            <returns>A successful result with either the original value or the default value.</returns>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisExtensions.ReportDiagnosticIfFailed(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext,FluentResults.Result,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Object[])">
            <summary>
            Reports a diagnostic if the analysis result indicates a violation.
            </summary>
            <param name="context">The syntax node analysis context.</param>
            <param name="result">The analysis result.</param>
            <param name="rule">The diagnostic rule to report.</param>
            <param name="location">The location to report the diagnostic.</param>
            <param name="messageArgs">Arguments for the diagnostic message.</param>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisExtensions.ReportDiagnosticIfFalse(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext,FluentResults.Result{System.Boolean},Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Object[])">
            <summary>
            Reports a diagnostic if the boolean result is false (indicating a violation).
            </summary>
            <param name="context">The syntax node analysis context.</param>
            <param name="result">The boolean analysis result.</param>
            <param name="rule">The diagnostic rule to report.</param>
            <param name="location">The location to report the diagnostic.</param>
            <param name="messageArgs">Arguments for the diagnostic message.</param>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisExtensions.ValidateNotNull``1(``0,System.String)">
            <summary>
            Validates that a syntax node is not null.
            </summary>
            <typeparam name="T">The syntax node type.</typeparam>
            <param name="node">The syntax node to validate.</param>
            <param name="parameterName">The parameter name for error reporting.</param>
            <returns>A result containing the validated node or an error.</returns>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisExtensions.ToStringResult(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Safely gets a string representation of a syntax node.
            </summary>
            <param name="node">The syntax node.</param>
            <returns>A result containing the string representation or an error.</returns>
        </member>
        <member name="T:ExxerRules.Analyzers.Common.AnalysisResult">
            <summary>
            Represents the result of an analysis operation using FluentResults.
            </summary>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisResult.Success``1(``0)">
            <summary>
            Creates a successful result with a value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to return.</param>
            <returns>A successful result containing the value.</returns>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisResult.Success">
            <summary>
            Creates a successful result without a value.
            </summary>
            <returns>A successful result.</returns>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisResult.Failure(System.String)">
            <summary>
            Creates a failed result with an error message.
            </summary>
            <param name="errorMessage">The error message.</param>
            <returns>A failed result with the error message.</returns>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisResult.Failure``1(System.String)">
            <summary>
            Creates a failed result with an error message for a typed result.
            </summary>
            <typeparam name="T">The type of the expected value.</typeparam>
            <param name="errorMessage">The error message.</param>
            <returns>A failed result with the error message.</returns>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisResult.Failure(System.Exception)">
            <summary>
            Creates a failed result from an exception.
            </summary>
            <param name="exception">The exception that caused the failure.</param>
            <returns>A failed result with the exception details.</returns>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.AnalysisResult.Failure``1(System.Exception)">
            <summary>
            Creates a failed result from an exception for a typed result.
            </summary>
            <typeparam name="T">The type of the expected value.</typeparam>
            <param name="exception">The exception that caused the failure.</param>
            <returns>A failed result with the exception details.</returns>
        </member>
        <member name="T:ExxerRules.Analyzers.Common.PatternDetector">
            <summary>
            Utility class for detecting code patterns using functional approach with FluentResults.
            </summary>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.PatternDetector.ValidateMethodNaming(System.String,System.String)">
            <summary>
            Detects if a method follows the specified naming pattern.
            </summary>
            <param name="methodName">The method name to validate.</param>
            <param name="pattern">The regex pattern to match against.</param>
            <returns>A result indicating if the pattern matches.</returns>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.PatternDetector.DetectTestAttributes(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax,Microsoft.CodeAnalysis.SemanticModel)">
            <summary>
            Detects if a method has test attributes.
            </summary>
            <param name="method">The method declaration to analyze.</param>
            <param name="semanticModel">The semantic model for type resolution.</param>
            <returns>A result containing information about test attributes.</returns>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.PatternDetector.DetectTestClass(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Detects if a class appears to be a test class based on naming and attributes.
            </summary>
            <param name="classDeclaration">The class declaration to analyze.</param>
            <returns>A result indicating if the class is a test class.</returns>
        </member>
        <member name="T:ExxerRules.Analyzers.Common.TestAttributeInfo">
            <summary>
            Information about test attributes found on a method.
            </summary>
        </member>
        <member name="M:ExxerRules.Analyzers.Common.TestAttributeInfo.#ctor(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean,ExxerRules.Analyzers.Common.TestFramework)">
            <summary>
            Initializes a new instance of the <see cref="T:ExxerRules.Analyzers.Common.TestAttributeInfo"/> class.
            </summary>
            <param name="attributeNames">The names of the test attributes found.</param>
            <param name="hasTestAttributes">Whether any test attributes were found.</param>
            <param name="framework">The detected test framework.</param>
        </member>
        <member name="P:ExxerRules.Analyzers.Common.TestAttributeInfo.AttributeNames">
            <summary>
            Gets the names of the test attributes found.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.Common.TestAttributeInfo.HasTestAttributes">
            <summary>
            Gets a value indicating whether any test attributes were found.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.Common.TestAttributeInfo.Framework">
            <summary>
            Gets the detected test framework.
            </summary>
        </member>
        <member name="T:ExxerRules.Analyzers.Common.TestFramework">
            <summary>
            Enumeration of supported test frameworks.
            </summary>
        </member>
        <member name="T:ExxerRules.Analyzers.DiagnosticCategories">
            <summary>
            Defines diagnostic categories for ExxerRules analyzers.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticCategories.ErrorHandling">
            <summary>
            Category for error handling related diagnostics.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticCategories.Testing">
            <summary>
            Category for testing related diagnostics.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticCategories.NullSafety">
            <summary>
            Category for null safety related diagnostics.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticCategories.Async">
            <summary>
            Category for async/await related diagnostics.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticCategories.Documentation">
            <summary>
            Category for documentation related diagnostics.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticCategories.CodeQuality">
            <summary>
            Category for code quality related diagnostics.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticCategories.Architecture">
            <summary>
            Category for architecture related diagnostics.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticCategories.Performance">
            <summary>
            Category for performance related diagnostics.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticCategories.Logging">
            <summary>
            Category for logging related diagnostics.
            </summary>
        </member>
        <member name="T:ExxerRules.Analyzers.DiagnosticIds">
            <summary>
            Defines diagnostic IDs for ExxerRules analyzers.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.UseResultPattern">
            <summary>
            Methods should return Result&lt;T&gt; instead of throwing exceptions.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.AvoidThrowingExceptions">
            <summary>
            Exception throwing detected in method that should return Result&lt;T&gt;.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.TestNamingConvention">
            <summary>
            Test methods should follow naming convention: Should_Action_When_Condition.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.UseXUnitV3">
            <summary>
            Use XUnit v3 for testing.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.UseShouldly">
            <summary>
            Use Shouldly for assertions instead of FluentAssertions.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.UseNSubstitute">
            <summary>
            Use NSubstitute for mocking instead of Moq.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.DoNotMockDbContext">
            <summary>
            Do not mock EF Core DbContext, use InMemory provider.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.ValidateNullParameters">
            <summary>
            Validate null parameters at method entry.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.UseNullSafetyPatterns">
            <summary>
            Use null safety patterns for Result&lt;T&gt;.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.AsyncMethodsShouldAcceptCancellationToken">
            <summary>
            Async methods should accept CancellationToken.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.UseConfigureAwaitFalse">
            <summary>
            Use ConfigureAwait(false) in library code.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.AvoidAsyncVoid">
            <summary>
            Avoid async void methods except for event handlers.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.PublicMembersShouldHaveXmlDocumentation">
            <summary>
            Public members should have XML documentation.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.AvoidMagicNumbersAndStrings">
            <summary>
            Avoid magic numbers and strings.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.UseExpressionBodiedMembers">
            <summary>
            Use expression-bodied members where appropriate.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.PrivateFieldNaming">
            <summary>
            Private fields should use camelCase without underscore.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.DoNotUseRegions">
            <summary>
            Do not use regions in code.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.DomainShouldNotReferenceInfrastructure">
            <summary>
            Domain layer should not reference Infrastructure.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.UseRepositoryPattern">
            <summary>
            Use repository pattern with focused interfaces.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.UseEfficientLinq">
            <summary>
            Use efficient LINQ operations.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.DisposeResourcesProperly">
            <summary>
            Dispose resources properly with using statements.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.UseStructuredLogging">
            <summary>
            Use structured logging instead of string concatenation.
            </summary>
        </member>
        <member name="F:ExxerRules.Analyzers.DiagnosticIds.DoNotUseConsoleWriteLine">
            <summary>
            Do not use Console.WriteLine in production code.
            </summary>
        </member>
        <member name="T:ExxerRules.Analyzers.Documentation.PublicMembersShouldHaveXmlDocumentationAnalyzer">
            <summary>
            Analyzer that enforces XML documentation on public members.
            Supports the "documentation is the bridge from intent to understanding" principle.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.Documentation.PublicMembersShouldHaveXmlDocumentationAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.Documentation.PublicMembersShouldHaveXmlDocumentationAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Analyzers.ErrorHandling.AvoidThrowingExceptionsAnalyzer">
            <summary>
            Analyzer that detects direct exception throwing in code.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.ErrorHandling.AvoidThrowingExceptionsAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.ErrorHandling.AvoidThrowingExceptionsAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Analyzers.ErrorHandling.UseResultPatternAnalyzer">
            <summary>
            Analyzer that detects methods throwing exceptions instead of returning Result&lt;T&gt;.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.ErrorHandling.UseResultPatternAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.ErrorHandling.UseResultPatternAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Analyzers.Logging.DoNotUseConsoleWriteLineAnalyzer">
            <summary>
            Analyzer that enforces not using Console.WriteLine in production code.
            Supports the "use structured logging" principle by preventing console output.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.Logging.DoNotUseConsoleWriteLineAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.Logging.DoNotUseConsoleWriteLineAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Analyzers.Logging.UseStructuredLoggingAnalyzer">
            <summary>
            Analyzer that enforces structured logging instead of string concatenation.
            Supports the "use structured logging" principle for better observability.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.Logging.UseStructuredLoggingAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.Logging.UseStructuredLoggingAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Analyzers.NullSafety.ValidateNullParametersAnalyzer">
            <summary>
            Analyzer that enforces null parameter validation at method entry points.
            Supports the fail-safe defaults and defensive programming principles.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.NullSafety.ValidateNullParametersAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.NullSafety.ValidateNullParametersAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Analyzers.Testing.DoNotMockDbContextAnalyzer">
            <summary>
            Analyzer that prevents mocking of EF Core DbContext, enforcing InMemory provider usage.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.Testing.DoNotMockDbContextAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.Testing.DoNotMockDbContextAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Analyzers.Testing.TestNamingConventionAnalyzer">
            <summary>
            Analyzer that enforces test naming convention: Should_Action_When_Condition.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.Testing.TestNamingConventionAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.Testing.TestNamingConventionAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Analyzers.Testing.UseNSubstituteAnalyzer">
            <summary>
            Analyzer that enforces NSubstitute usage instead of Moq for mocking.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.Testing.UseNSubstituteAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.Testing.UseNSubstituteAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Analyzers.Testing.UseShouldlyAnalyzer">
            <summary>
            Analyzer that enforces Shouldly usage instead of FluentAssertions.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.Testing.UseShouldlyAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.Testing.UseShouldlyAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:ExxerRules.Analyzers.Testing.UseXUnitV3Analyzer">
            <summary>
            Analyzer that enforces XUnit v3 usage for testing.
            </summary>
        </member>
        <member name="P:ExxerRules.Analyzers.Testing.UseXUnitV3Analyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:ExxerRules.Analyzers.Testing.UseXUnitV3Analyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
    </members>
</doc>
