# Rule for Writing Rules

## Meta

**Title**: Rule for Writing Rules  
**Description**: Establishes standards for creating effective AI agent rules that are clear, enforceable, and optimized for AI consumption  
**Created-at**: 2025-01-05T22:45:00Z  
**Last-updated-at**: 2025-01-05T22:45:00Z  
**Applies-to**: Rule creation, rule refactoring, AI agent instruction design  
**File-matcher**: *.mdc files in .cursor/rules/ directory  

## Requirements

### <requirement priority="critical">
**Description**: Every rule must have proper YAML frontmatter with required fields  
**Examples**:
<correct-example>
```yaml
---
attachmentType: auto
globs: *.cs
description: C# coding standards for modern .NET development
alwaysApply: false
---
```
</correct-example>
<incorrect-example>
```yaml
---
globs: "*.cs"
description: Some coding rules
---
```
</incorrect-example>
</requirement>

### <requirement priority="high">
**Description**: Use semantic naming convention with numbered prefixes and underscores for rule organization  
**Examples**:
<correct-example>
- 0000_RuleToWriteRules.mdc (Core standards)
- 1001_CSharpCodingStandards.mdc (C# language rules)
- 2001_PythonBestPractices.mdc (Python language rules)
- 3001_TestingStandards.mdc (Testing standards)
</correct-example>
<incorrect-example>
- rule.mdc
- coding.mdc
- test.mdc
- 1001CSharpCodingStandards.mdc (missing underscore)
</incorrect-example>
</requirement>

### <requirement priority="high">
**Description**: Structure rule content with clear sections: Meta, Requirements, References, Grammar/Schema, Context  
**Examples**:
<correct-example>
```markdown
# Rule Title

## Meta
**Title**: Descriptive name
**Description**: Clear purpose
**Applies-to**: Specific scope

## Requirements
<requirement priority="high">
**Description**: Specific behavior
**Examples**: Correct/incorrect examples
</requirement>
```
</correct-example>
<incorrect-example>
```markdown
# Some Rules

- Do this
- Don't do that
- Maybe do this
```
</incorrect-example>
</requirement>

### <requirement priority="medium">
**Description**: Include both positive and negative examples for each requirement  
**Examples**:
<correct-example>
<requirement priority="high">
**Description**: Use meaningful variable names
**Examples**:
<correct-example>
```csharp
var customerOrder = new Order();
var isValid = ValidateOrder(customerOrder);
```
</correct-example>
<incorrect-example>
```csharp
var x = new Order();
var y = ValidateOrder(x);
```
</incorrect-example>
</requirement>
</correct-example>
<incorrect-example>
<requirement priority="high">
**Description**: Use meaningful variable names
- Good: customerOrder, isValid
- Bad: x, y, z
</requirement>
</incorrect-example>
</requirement>

### <requirement priority="critical">
**Description**: Keep frontmatter description under 120 characters while maintaining clear intent  
**Examples**:
<correct-example>
```yaml
description: C# async/await best practices and ConfigureAwait usage patterns
```
</correct-example>
<incorrect-example>
```yaml
description: This rule defines how to properly use async and await keywords in C# programming language, including when to use ConfigureAwait(false) and when not to use it, with examples of proper implementation patterns and common pitfalls to avoid
```
</incorrect-example>
</requirement>

### <requirement priority="high">
**Description**: Use imperative language designed for AI agent consumption  
**Examples**:
<correct-example>
- "Always use ConfigureAwait(false) in library code"
- "Never use async void except for event handlers"
- "Must validate input parameters before processing"
</correct-example>
<incorrect-example>
- "It's good to use ConfigureAwait(false)"
- "You might want to avoid async void"
- "Consider validating input parameters"
</incorrect-example>
</requirement>

### <requirement priority="medium">
**Description**: Include references to related rules when applicable  
**Examples**:
<correct-example>
```markdown
## References
<reference as="dependency" href=".cursor/rules/0000RuleToWriteRules.mdc" reason="Defines rule structure standards">Rule Writing Standards</reference>
<reference as="context" href=".cursor/rules/1001CSharpCodingStandards.mdc" reason="Related coding standards">C# Standards</reference>
```
</correct-example>
<incorrect-example>
```markdown
## Related Rules
- Some other rule
- Another rule
```
</incorrect-example>
</requirement>

## Naming Convention

### Prefix Categories
- **0000-0099**: Core standards and foundational rules
- **0100-0199**: Tool configurations and integrations
- **0300-0399**: Testing standards and practices
- **0400-0499**: Documentation standards
- **0500-0599**: Presentation and UI standards
- **0600-0699**: Workflow and process rules
- **0700-0799**: Templates and patterns
- **0800-0899**: Framework-specific rules
- **1000-1999**: Language-specific rules (1xxx = C#, 2xxx = Python, etc.)
- **2000+**: Specialized domain rules

### Language Numbering
- **1xxx**: C# and .NET rules
- **2xxx**: Python rules
- **3xxx**: SQL and database rules
- **4xxx**: JavaScript/TypeScript rules
- **5xxx**: HTML/CSS rules
- **6xxx**: Java rules
- **7xxx**: Go rules
- **8xxx**: Rust rules
- **9xxx**: Other languages

## Grammar and Schema

### <grammar-entry title="YAML Frontmatter">
<pattern description="Required frontmatter structure">^---\nattachmentType:\s+(auto|always|manual)\nglobs:\s+[^\n]+\ndescription:\s+[^\n]+\nalwaysApply:\s+(true|false)\n---$</pattern>
</grammar-entry>

### <grammar-entry title="Requirement Structure">
<pattern description="Requirement block format">^<requirement priority="(critical|high|medium|low)">\n\*\*Description\*\*:\s+[^\n]+\n\*\*Examples\*\*:\n<correct-example>\n[^<]*\n</correct-example>\n<incorrect-example>\n[^<]*\n</incorrect-example>\n</requirement>$</pattern>
</grammar-entry>

## Context

This rule establishes the foundation for creating effective AI agent rules. The structure ensures:

1. **Consistency**: All rules follow the same format for easy parsing
2. **Clarity**: Clear requirements with examples reduce ambiguity
3. **Maintainability**: Structured format enables easy updates and references
4. **AI Optimization**: Designed for efficient consumption by AI agents
5. **Traceability**: References enable rule relationships and dependencies

The naming convention provides systematic organization while the grammar ensures structural validation. This rule should be referenced by all other rules to maintain consistency across the rulebase.

**Note**: All rule files have been successfully renamed to follow the underscore naming convention (e.g., `0000_RuleToWriteRules.mdc`, `1001_CSharpCodingStandards.mdc`).

## References

<reference as="dependency" href=".cursor/rules/1001_CSharpCodingStandards.mdc" reason="Establishes coding standards context">C# Coding Standards</reference>
<reference as="context" href=".cursor/rules/0001_GeneralEngineeringPrinciples.mdc" reason="General rule application patterns">General Engineering Principles</reference>
- 6. Focus on machine-actionable instructions over human explanations
<critical>
- NEVER include verbose explanations or redundant context that increases AI token overhead
- Keep file as short and to the point as possible BUT NEVER at the expense of sacrificing rule impact and usefulness for the AI Agent.
- the front matter can ONLY have the fields description and globs.
</critical>