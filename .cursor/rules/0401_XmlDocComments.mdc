# XML Documentation Standards

## Meta

**Title**: XML Documentation Standards  
**Description**: Establishes comprehensive XML documentation standards for C# .NET public APIs  
**Created-at**: 2025-01-05T23:05:00Z  
**Last-updated-at**: 2025-01-05T23:05:00Z  
**Applies-to**: Public API documentation, code documentation, IntelliSense support  
**File-matcher**: *.cs files with public members  

## Requirements

### <requirement priority="critical">
**Description**: Add XML documentation to all public classes, methods, and properties  
**Examples**:
<correct-example>
```csharp
/// <summary>
/// Represents the result of an operation, including success status and error messages.
/// </summary>
public class Result
{
    /// <summary>
    /// Gets a value indicating whether the operation was successful.
    /// </summary>
    public bool IsSuccess { get; }
    
    /// <summary>
    /// Gets a value indicating whether the operation failed.
    /// </summary>
    public bool IsFailure => !IsSuccess;
    
    /// <summary>
    /// Creates a successful result.
    /// </summary>
    /// <returns>A successful <see cref="Result"/> instance.</returns>
    public static Result Success()
    {
        return new Result(true, Array.Empty<string>());
    }
}
```
</correct-example>
<incorrect-example>
```csharp
public class Result
{
    public bool IsSuccess { get; }
    public bool IsFailure => !IsSuccess;
    
    public static Result Success()
    {
        return new Result(true, Array.Empty<string>());
    }
}
```
</incorrect-example>
</requirement>

### <requirement priority="critical">
**Description**: Use meaningful and concise descriptions that add value for code consumers  
**Examples**:
<correct-example>
```csharp
/// <summary>
/// Validates an order against business rules and returns a result indicating success or failure.
/// </summary>
/// <param name="order">The order to validate</param>
/// <returns>A result containing validation status and any error messages</returns>
public Result ValidateOrder(Order order)
{
    // Implementation
}

/// <summary>
/// Gets the total amount of the order including tax and shipping.
/// </summary>
/// <value>The total amount in the specified currency</value>
public decimal TotalAmount { get; }
```
</correct-example>
<incorrect-example>
```csharp
/// <summary>
/// Validates order
/// </summary>
/// <param name="order">order</param>
/// <returns>result</returns>
public Result ValidateOrder(Order order)
{
    // Implementation
}

/// <summary>
/// Total amount
/// </summary>
public decimal TotalAmount { get; }
```
</incorrect-example>
</requirement>

### <requirement priority="high">
**Description**: Include parameter documentation for all method parameters  
**Examples**:
<correct-example>
```csharp
/// <summary>
/// Creates a new order with the specified customer and items.
/// </summary>
/// <param name="customer">The customer placing the order</param>
/// <param name="items">The items to include in the order</param>
/// <param name="shippingAddress">The shipping address for the order</param>
/// <returns>A result containing the created order or error information</returns>
public Result<Order> CreateOrder(Customer customer, IEnumerable<OrderItem> items, Address shippingAddress)
{
    // Implementation
}
```
</correct-example>
<incorrect-example>
```csharp
/// <summary>
/// Creates a new order.
/// </summary>
/// <param name="customer">customer</param>
/// <param name="items">items</param>
/// <param name="shippingAddress">address</param>
/// <returns>result</returns>
public Result<Order> CreateOrder(Customer customer, IEnumerable<OrderItem> items, Address shippingAddress)
{
    // Implementation
}
```
</incorrect-example>
</requirement>

### <requirement priority="high">
**Description**: Include return value documentation for all non-void methods  
**Examples**:
<correct-example>
```csharp
/// <summary>
/// Calculates the total cost including tax and shipping.
/// </summary>
/// <param name="order">The order to calculate the total for</param>
/// <returns>The total cost including all fees and taxes</returns>
public decimal CalculateTotal(Order order)
{
    // Implementation
}

/// <summary>
/// Gets the current order status.
/// </summary>
/// <returns>The current status of the order</returns>
public OrderStatus GetStatus()
{
    // Implementation
}
```
</correct-example>
<incorrect-example>
```csharp
/// <summary>
/// Calculates the total cost.
/// </summary>
/// <param name="order">The order</param>
/// <returns>total</returns>
public decimal CalculateTotal(Order order)
{
    // Implementation
}

/// <summary>
/// Gets the order status.
/// </summary>
/// <returns>status</returns>
public OrderStatus GetStatus()
{
    // Implementation
}
```
</incorrect-example>
</requirement>

### <requirement priority="medium">
**Description**: Use cref references to link to related types and members  
**Examples**:
<correct-example>
```csharp
/// <summary>
/// Creates a new order with the specified customer and items.
/// </summary>
/// <param name="customer">The customer placing the order</param>
/// <param name="items">The items to include in the order</param>
/// <returns>A result containing the created <see cref="Order"/> or error information</returns>
/// <exception cref="ArgumentNullException">Thrown when <paramref name="customer"/> is null</exception>
public Result<Order> CreateOrder(Customer customer, IEnumerable<OrderItem> items)
{
    // Implementation
}
```
</correct-example>
<incorrect-example>
```csharp
/// <summary>
/// Creates a new order with the specified customer and items.
/// </summary>
/// <param name="customer">The customer placing the order</param>
/// <param name="items">The items to include in the order</param>
/// <returns>A result containing the created order or error information</returns>
public Result<Order> CreateOrder(Customer customer, IEnumerable<OrderItem> items)
{
    // Implementation
}
```
</incorrect-example>
</requirement>

### <requirement priority="critical">
**Description**: Never modify existing code logic or structure - only add XML comments  
**Examples**:
<correct-example>
```csharp
// Only adding XML comments, no code changes
/// <summary>
/// Validates the order against business rules.
/// </summary>
/// <param name="order">The order to validate</param>
/// <returns>A result indicating validation success or failure</returns>
public Result ValidateOrder(Order order)
{
    // Existing implementation unchanged
    if (order == null)
        return Result.WithFailure("Order cannot be null");
    
    return Result.Success();
}
```
</correct-example>
<incorrect-example>
```csharp
// Modifying code structure to add documentation
/// <summary>
/// Validates the order against business rules.
/// </summary>
/// <param name="order">The order to validate</param>
/// <returns>A result indicating validation success or failure</returns>
public Result ValidateOrder(Order order)
{
    // Changed implementation - NOT ALLOWED
    if (order is null)
        return Result.WithFailure("Order cannot be null");
    
    return Result.Success();
}
```
</incorrect-example>
</requirement>

### <requirement priority="high">
**Description**: Document exceptions that may be thrown by public methods  
**Examples**:
<correct-example>
```csharp
/// <summary>
/// Processes the order and updates inventory.
/// </summary>
/// <param name="order">The order to process</param>
/// <returns>A result indicating processing success or failure</returns>
/// <exception cref="ArgumentNullException">Thrown when <paramref name="order"/> is null</exception>
/// <exception cref="InvalidOperationException">Thrown when inventory is insufficient</exception>
public Result ProcessOrder(Order order)
{
    // Implementation
}
```
</correct-example>
<incorrect-example>
```csharp
/// <summary>
/// Processes the order and updates inventory.
/// </summary>
/// <param name="order">The order to process</param>
/// <returns>A result indicating processing success or failure</returns>
public Result ProcessOrder(Order order)
{
    // Implementation
}
```
</incorrect-example>
</requirement>

### <requirement priority="medium">
**Description**: Use consistent documentation style across the codebase  
**Examples**:
<correct-example>
```csharp
// Consistent style for all public members
/// <summary>
/// Represents a customer order in the system.
/// </summary>
public class Order
{
    /// <summary>
    /// Gets the unique identifier for the order.
    /// </summary>
    public Guid Id { get; }
    
    /// <summary>
    /// Gets the customer who placed the order.
    /// </summary>
    public Customer Customer { get; }
    
    /// <summary>
    /// Gets the total amount of the order including tax and shipping.
    /// </summary>
    public decimal TotalAmount { get; }
}
```
</correct-example>
<incorrect-example>
```csharp
// Inconsistent documentation style
/// <summary>
/// Represents a customer order in the system.
/// </summary>
public class Order
{
    /// <summary>
    /// Id
    /// </summary>
    public Guid Id { get; }
    
    /// <summary>
    /// Customer who placed the order
    /// </summary>
    public Customer Customer { get; }
    
    /// <summary>
    /// Total amount
    /// </summary>
    public decimal TotalAmount { get; }
}
```
</incorrect-example>
</requirement>

## Documentation Standards

### XML Tags
- **`<summary>`**: Required for all public members
- **`<param>`**: Required for all method parameters
- **`<returns>`**: Required for all non-void methods
- **`<exception>`**: Required for methods that throw exceptions
- **`<see>`**: Used to reference other types and members
- **`<paramref>`**: Used to reference parameters in descriptions

### Documentation Guidelines
- **Be Concise**: Keep descriptions brief but informative
- **Be Accurate**: Ensure documentation matches actual behavior
- **Be Consistent**: Use consistent terminology and style
- **Add Value**: Focus on information not obvious from the code
- **Use Present Tense**: Describe what the member does, not what it did

### Quality Checklist
- [ ] All public classes have `<summary>` documentation
- [ ] All public methods have `<summary>`, `<param>`, and `<returns>` documentation
- [ ] All public properties have `<summary>` documentation
- [ ] Parameter names in `<param>` tags match actual parameter names
- [ ] Documentation is meaningful and adds value
- [ ] No code logic or structure has been modified

## Context

This rule establishes comprehensive XML documentation standards for C# .NET public APIs. It emphasizes:

1. **Complete Coverage**: All public members must be documented
2. **Quality Documentation**: Meaningful descriptions that add value
3. **Consistency**: Uniform style and terminology across the codebase
4. **IntelliSense Support**: Proper XML tags for IDE integration
5. **Code Preservation**: No modifications to existing code logic

The rule ensures that all public APIs are properly documented for developers consuming the code, improving code maintainability and developer experience.

## References

<reference as="dependency" href=".cursor/rules/0000RuleToWriteRules.mdc" reason="Defines rule structure standards">Rule Writing Standards</reference>
<reference as="context" href=".cursor/rules/CodeEnhancer.mdc" reason="C# coding standards">C# Enhancement Standards</reference>

if you find any missing comment remember the thoerem of bates of conditional propertie, 
if you find an error the probabilite of finding another one just increased to almost 100%.

"Leave the code in better shape thant when you foundit"
